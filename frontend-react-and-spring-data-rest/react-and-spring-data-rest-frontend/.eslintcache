[{"E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\index.js":"1","E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\App.js":"2","E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\reportWebVitals.js":"3","E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\main\\js\\follow.js":"4","E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\main\\js\\client.js":"5","E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\main\\js\\websocket-listener.js":"6","E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\main\\js\\api\\uriTemplateInterceptor.js":"7","E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\main\\js\\api\\uriListConverter.js":"8"},{"size":501,"mtime":1610291163476,"results":"9","hashOfConfig":"10"},{"size":12334,"mtime":1610289231540,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":931,"mtime":1610288832361,"results":"13","hashOfConfig":"10"},{"size":843,"mtime":1610292116606,"results":"14","hashOfConfig":"10"},{"size":537,"mtime":1610288832654,"results":"15","hashOfConfig":"10"},{"size":564,"mtime":1610290866898,"results":"16","hashOfConfig":"10"},{"size":572,"mtime":1610290564605,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1m8zmde",{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\index.js",[],["38","39"],"E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\App.js",["40","41","42","43"],"\nconst React = require('react');\nconst ReactDOM = require('react-dom');\nconst when = require('when');\nconst client = require('./main/js/client');\n\nconst follow = require('./main/js/follow');\n\nconst stompClient = require('./main/js/websocket-listener');\n\nconst root = '/api';\n\nclass App extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {employees: [], attributes: [], page: 1, pageSize: 2, links: {}\n\t\t   , loggedInManager: this.props.loggedInManager};\n\t\tthis.updatePageSize = this.updatePageSize.bind(this);\n\t\tthis.onCreate = this.onCreate.bind(this);\n\t\tthis.onUpdate = this.onUpdate.bind(this);\n\t\tthis.onDelete = this.onDelete.bind(this);\n\t\tthis.onNavigate = this.onNavigate.bind(this);\n\t\tthis.refreshCurrentPage = this.refreshCurrentPage.bind(this);\n\t\tthis.refreshAndGoToLastPage = this.refreshAndGoToLastPage.bind(this);\n\t}\n\n\tloadFromServer(pageSize) {\n\t\tfollow(client, root, [\n\t\t\t\t{rel: 'employees', params: {size: pageSize}}]\n\t\t).then(employeeCollection => {\n\t\t\treturn client({\n\t\t\t\tmethod: 'GET',\n\t\t\t\tpath: employeeCollection.entity._links.profile.href,\n\t\t\t\theaders: {'Accept': 'application/schema+json'}\n\t\t\t}).then(schema => {\n\n\t\t\t\t/**\n\t\t\t\t * Filter unneeded JSON Schema properties, like uri references and\n\t\t\t\t * subtypes ($ref).\n\t\t\t\t */\n\t\t\t\tObject.keys(schema.entity.properties).forEach(function (property) {\n\t\t\t\t\tif (schema.entity.properties[property].hasOwnProperty('format') &&\n\t\t\t\t\t\tschema.entity.properties[property].format === 'uri') {\n\t\t\t\t\t\tdelete schema.entity.properties[property];\n\t\t\t\t\t}\n\t\t\t\t\telse if (schema.entity.properties[property].hasOwnProperty('$ref')) {\n\t\t\t\t\t\tdelete schema.entity.properties[property];\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.schema = schema.entity;\n\t\t\t\tthis.links = employeeCollection.entity._links;\n\t\t\t\treturn employeeCollection;\n\n\t\t\t});\n\t\t}).then(employeeCollection => {\n\t\t\tthis.page = employeeCollection.entity.page;\n\t\t\treturn employeeCollection.entity._embedded.employees.map(employee =>\n\t\t\t\t\tclient({\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\tpath: employee._links.self.href\n\t\t\t\t\t})\n\t\t\t);\n\t\t}).then(employeePromises => {\n\t\t\treturn when.all(employeePromises);\n\t\t}).done(employees => {\n\t\t\tthis.setState({\n\t\t\t\tpage: this.page,\n\t\t\t\temployees: employees,\n\t\t\t\tattributes: Object.keys(this.schema.properties),\n\t\t\t\tpageSize: pageSize,\n\t\t\t\tlinks: this.links\n\t\t\t});\n\t\t});\n\t}\n\n\tonCreate(newEmployee) {\n\t\tfollow(client, root, ['employees']).done(response => {\n\t\t\tclient({\n\t\t\t\tmethod: 'POST',\n\t\t\t\tpath: response.entity._links.self.href,\n\t\t\t\tentity: newEmployee,\n\t\t\t\theaders: {'Content-Type': 'application/json'}\n\t\t\t})\n\t\t})\n\t}\n\n\tonUpdate(employee, updatedEmployee) {\n\t\tif(employee.entity.manager.name === this.state.loggedInManager) {\n\t\t\tupdatedEmployee[\"manager\"] = employee.entity.manager;\n\t\t\tclient({\n\t\t\t\tmethod: 'PUT',\n\t\t\t\tpath: employee.entity._links.self.href,\n\t\t\t\tentity: updatedEmployee,\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'If-Match': employee.headers.Etag\n\t\t\t\t}\n\t\t\t}).done(response => {\n\t\t\t\t/* Let the websocket handler update the state */\n\t\t\t}, response => {\n\t\t\t\tif (response.status.code === 403) {\n\t\t\t\t\talert('ACCESS DENIED: You are not authorized to update ' +\n\t\t\t\t\t\temployee.entity._links.self.href);\n\t\t\t\t}\n\t\t\t\tif (response.status.code === 412) {\n\t\t\t\t\talert('DENIED: Unable to update ' + employee.entity._links.self.href +\n\t\t\t\t\t\t'. Your copy is stale.');\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\talert(\"You are not authorized to update\");\n\t\t}\n\t}\n\n\tonDelete(employee) {\n\t\tclient({method: 'DELETE', path: employee.entity._links.self.href}\n\t\t).done(response => {/* let the websocket handle updating the UI */},\n\t\tresponse => {\n\t\t\tif (response.status.code === 403) {\n\t\t\t\talert('ACCESS DENIED: You are not authorized to delete ' +\n\t\t\t\t\temployee.entity._links.self.href);\n\t\t\t}\n\t\t});\n\t}\n\n\tonNavigate(navUri) {\n\t\tclient({\n\t\t\tmethod: 'GET',\n\t\t\tpath: navUri\n\t\t}).then(employeeCollection => {\n\t\t\tthis.links = employeeCollection.entity._links;\n\t\t\tthis.page = employeeCollection.entity.page;\n\n\t\t\treturn employeeCollection.entity._embedded.employees.map(employee =>\n\t\t\t\t\tclient({\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\tpath: employee._links.self.href\n\t\t\t\t\t})\n\t\t\t);\n\t\t}).then(employeePromises => {\n\t\t\treturn when.all(employeePromises);\n\t\t}).done(employees => {\n\t\t\tthis.setState({\n\t\t\t\tpage: this.page,\n\t\t\t\temployees: employees,\n\t\t\t\tattributes: Object.keys(this.schema.properties),\n\t\t\t\tpageSize: this.state.pageSize,\n\t\t\t\tlinks: this.links\n\t\t\t});\n\t\t});\n\t}\n\n\tupdatePageSize(pageSize) {\n\t\tif (pageSize !== this.state.pageSize) {\n\t\t\tthis.loadFromServer(pageSize);\n\t\t}\n\t}\n\n\trefreshAndGoToLastPage(message) {\n\t\tfollow(client, root, [{\n\t\t\trel: 'employees',\n\t\t\tparams: {size: this.state.pageSize}\n\t\t}]).done(response => {\n\t\t\tif (response.entity._links.last !== undefined) {\n\t\t\t\tthis.onNavigate(response.entity._links.last.href);\n\t\t\t} else {\n\t\t\t\tthis.onNavigate(response.entity._links.self.href);\n\t\t\t}\n\t\t})\n\t}\n\n\trefreshCurrentPage(message) {\n\t\tfollow(client, root, [{\n\t\t\trel: 'employees',\n\t\t\tparams: {\n\t\t\t\tsize: this.state.pageSize,\n\t\t\t\tpage: this.state.page.number\n\t\t\t}\n\t\t}]).then(employeeCollection => {\n\t\t\tthis.links = employeeCollection.entity._links;\n\t\t\tthis.page = employeeCollection.entity.page;\n\n\t\t\treturn employeeCollection.entity._embedded.employees.map(employee => {\n\t\t\t\treturn client({\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\tpath: employee._links.self.href\n\t\t\t\t})\n\t\t\t});\n\t\t}).then(employeePromises => {\n\t\t\treturn when.all(employeePromises);\n\t\t}).then(employees => {\n\t\t\tthis.setState({\n\t\t\t\tpage: this.page,\n\t\t\t\temployees: employees,\n\t\t\t\tattributes: Object.keys(this.schema.properties),\n\t\t\t\tpageSize: this.state.pageSize,\n\t\t\t\tlinks: this.links\n\t\t\t});\n\t\t});\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadFromServer(this.state.pageSize);\n\t\tstompClient.register([\n\t\t\t{route: '/topic/newEmployee', callback: this.refreshAndGoToLastPage},\n\t\t\t{route: '/topic/updateEmployee', callback: this.refreshCurrentPage},\n\t\t\t{route: '/topic/deleteEmployee', callback: this.refreshCurrentPage}\n\t\t]);\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<CreateDialog attributes={this.state.attributes} onCreate={this.onCreate}/>\n\t\t\t\t<EmployeeList page={this.state.page}\n\t\t\t\t\t\t\t  employees={this.state.employees}\n\t\t\t\t\t\t\t  links={this.state.links}\n\t\t\t\t\t\t\t  pageSize={this.state.pageSize}\n\t\t\t\t\t\t\t  attributes={this.state.attributes}\n\t\t\t\t\t\t\t  onNavigate={this.onNavigate}\n\t\t\t\t\t\t\t  onUpdate={this.onUpdate}\n\t\t\t\t\t\t\t  onDelete={this.onDelete}\n\t\t\t\t\t\t\t  updatePageSize={this.updatePageSize}\n\t\t\t\t\t\t\t  loggedInManager={this.state.loggedInManager}/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass CreateDialog extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleSubmit(e) {\n\t\te.preventDefault();\n\t\tconst newEmployee = {};\n\t\tthis.props.attributes.forEach(attribute => {\n\t\t\tnewEmployee[attribute] = ReactDOM.findDOMNode(this.refs[attribute]).value.trim();\n\t\t});\n\t\tthis.props.onCreate(newEmployee);\n\t\tthis.props.attributes.forEach(attribute => {\n\t\t\tReactDOM.findDOMNode(this.refs[attribute]).value = ''; // clear out the dialog's inputs\n\t\t});\n\t\twindow.location = \"#\";\n\t}\n\n\trender() {\n\t\tconst inputs = this.props.attributes.map(attribute =>\n\t\t\t<p key={attribute}>\n\t\t\t\t<input type=\"text\" placeholder={attribute} ref={attribute} className=\"field\"/>\n\t\t\t</p>\n\t\t);\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<a href=\"#createEmployee\">Create</a>\n\n\t\t\t\t<div id=\"createEmployee\" className=\"modalDialog\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<a href=\"#\" title=\"Close\" className=\"close\">X</a>\n\n\t\t\t\t\t\t<h2>Create new employee</h2>\n\n\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t{inputs}\n\t\t\t\t\t\t\t<button onClick={this.handleSubmit}>Create</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass UpdateDialog extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleSubmit(e) {\n\t\te.preventDefault();\n\t\tconst updatedEmployee = {};\n\t\tthis.props.attributes.forEach(attribute => {\n\t\t\tupdatedEmployee[attribute] = ReactDOM.findDOMNode(this.refs[attribute]).value.trim();\n\t\t});\n\t\tthis.props.onUpdate(this.props.employee, updatedEmployee);\n\t\twindow.location = \"#\";\n\t}\n\n\trender() {\n\t\tconst inputs = this.props.attributes.map(attribute =>\n\t\t\t<p key={this.props.employee.entity[attribute]}>\n\t\t\t\t<input type=\"text\" placeholder={attribute}\n\t\t\t\t\t   defaultValue={this.props.employee.entity[attribute]}\n\t\t\t\t\t   ref={attribute} className=\"field\"/>\n\t\t\t</p>\n\t\t);\n\n\t\tconst dialogId = \"updateEmployee-\" + this.props.employee.entity._links.self.href;\n\n\t\tconst isManagerCorrect = this.props.employee.entity.manager.name == this.props.loggedInManager;\n\n\t\tif (isManagerCorrect === false) {\n\t\t\treturn (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<a>Not Your Employee</a>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<a href={\"#\" + dialogId}>Update</a>\n\t\n\t\t\t\t\t<div id={dialogId} className=\"modalDialog\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a href=\"#\" title=\"Close\" className=\"close\">X</a>\n\t\n\t\t\t\t\t\t\t<h2>Update an employee</h2>\n\t\n\t\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t\t{inputs}\n\t\t\t\t\t\t\t\t<button onClick={this.handleSubmit}>Update</button>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\n}\n\nexport default App;\n\nclass EmployeeList extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleNavFirst = this.handleNavFirst.bind(this);\n\t\tthis.handleNavPrev = this.handleNavPrev.bind(this);\n\t\tthis.handleNavNext = this.handleNavNext.bind(this);\n\t\tthis.handleNavLast = this.handleNavLast.bind(this);\n\t\tthis.handleInput = this.handleInput.bind(this);\n\t}\n\n\thandleInput(e) {\n\t\te.preventDefault();\n\t\tconst pageSize = ReactDOM.findDOMNode(this.refs.pageSize).value;\n\t\tif (/^[0-9]+$/.test(pageSize)) {\n\t\t\tthis.props.updatePageSize(pageSize);\n\t\t} else {\n\t\t\tReactDOM.findDOMNode(this.refs.pageSize).value = pageSize.substring(0, pageSize.length - 1);\n\t\t}\n\t}\n\n\thandleNavFirst(e) {\n\t\te.preventDefault();\n\t\tthis.props.onNavigate(this.props.links.first.href);\n\t}\n\n\thandleNavPrev(e) {\n\t\te.preventDefault();\n\t\tthis.props.onNavigate(this.props.links.prev.href);\n\t}\n\n\thandleNavNext(e) {\n\t\te.preventDefault();\n\t\tthis.props.onNavigate(this.props.links.next.href);\n\t}\n\n\thandleNavLast(e) {\n\t\te.preventDefault();\n\t\tthis.props.onNavigate(this.props.links.last.href);\n\t}\n\n\trender() {\n\t\tconst pageInfo = this.props.page.hasOwnProperty(\"number\") ?\n\t\t\t<h3>Employees - Page {this.props.page.number + 1} of {this.props.page.totalPages}</h3> : null;\n\n\t\tconst employees = this.props.employees.map(employee =>\n\t\t\t<Employee key={employee.entity._links.self.href}\n\t\t\t\t\t  employee={employee}\n\t\t\t\t\t  attributes={this.props.attributes}\n\t\t\t\t\t  onUpdate={this.props.onUpdate}\n\t\t\t\t\t  onDelete={this.props.onDelete}\n\t\t\t\t\t  loggedInManager={this.props.loggedInManager}/>\n\t\t);\n\n\t\tconst navLinks = [];\n\t\tif (\"first\" in this.props.links) {\n\t\t\tnavLinks.push(<button key=\"first\" onClick={this.handleNavFirst}>&lt;&lt;</button>);\n\t\t}\n\t\tif (\"prev\" in this.props.links) {\n\t\t\tnavLinks.push(<button key=\"prev\" onClick={this.handleNavPrev}>&lt;</button>);\n\t\t}\n\t\tif (\"next\" in this.props.links) {\n\t\t\tnavLinks.push(<button key=\"next\" onClick={this.handleNavNext}>&gt;</button>);\n\t\t}\n\t\tif (\"last\" in this.props.links) {\n\t\t\tnavLinks.push(<button key=\"last\" onClick={this.handleNavLast}>&gt;&gt;</button>);\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{pageInfo}\n\t\t\t\t<input ref=\"pageSize\" defaultValue={this.props.pageSize} onInput={this.handleInput}/>\n\t\t\t\t<table>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>First Name</th>\n\t\t\t\t\t\t\t<th>Last Name</th>\n\t\t\t\t\t\t\t<th>Description</th>\n\t\t\t\t\t\t\t<th>Manager</th>\n\t\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t{employees}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t<div>\n\t\t\t\t\t{navLinks}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Employee extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleDelete = this.handleDelete.bind(this);\n\t}\n\n\thandleDelete() {\n\t\tthis.props.onDelete(this.props.employee);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<tr>\n\t\t\t\t<td>{this.props.employee.entity.firstName}</td>\n\t\t\t\t<td>{this.props.employee.entity.lastName}</td>\n\t\t\t\t<td>{this.props.employee.entity.description}</td>\n\t\t\t\t<td>{this.props.employee.entity.manager.name}</td>\n\t\t\t\t<td>\n\t\t\t\t\t<UpdateDialog employee={this.props.employee}\n\t\t\t\t\t\t\t\t  attributes={this.props.attributes}\n\t\t\t\t\t\t\t\t  onUpdate={this.props.onUpdate}\n\t\t\t\t\t\t\t\t  loggedInManager={this.props.loggedInManager}/>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<button onClick={this.handleDelete}>Delete</button>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t)\n\t}\n}\n\nReactDOM.render(\n\t<App loggedInManager={document.getElementById('managername').innerHTML } />,\n\tdocument.getElementById('react')\n)\n\n","E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\reportWebVitals.js",[],"E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\main\\js\\follow.js",[],"E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\main\\js\\client.js",["44","45"],"\nconst rest = require('rest');\nconst defaultRequest = require('rest/interceptor/defaultRequest');\nconst mime = require('rest/interceptor/mime');\nconst uriTemplateInterceptor = require('./api/uriTemplateInterceptor');\nconst errorCode = require('rest/interceptor/errorCode');\nconst baseRegistry = require('rest/mime/registry');\n\nconst uriListConverter = require('./api/uriListConverter');\n\nconst registry = baseRegistry.child();\n\nregistry.register('text/uri-list', require('./api/uriListConverter'));\n//registry.register('text/uri-list', uriListConverter.uriListConverter);\nregistry.register('application/hal+json', require('rest/mime/type/application/hal'));\n\nmodule.exports = rest\n\t.wrap(mime, { registry: registry })\n\t//.wrap(uriTemplateInterceptor)\n\t.wrap(errorCode)\n\t.wrap(defaultRequest, { headers: { 'Accept': 'application/hal+json' }});\n","E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\main\\js\\websocket-listener.js",[],"E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\main\\js\\api\\uriTemplateInterceptor.js",[],["46","47"],"E:\\React_learning\\react-and-spring-data-rest-frontend\\src\\main\\js\\api\\uriListConverter.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":265,"column":7,"nodeType":"54","endLine":265,"endColumn":51},{"ruleId":"55","severity":1,"message":"56","line":308,"column":68,"nodeType":"57","messageId":"58","endLine":308,"endColumn":70},{"ruleId":"52","severity":1,"message":"59","line":313,"column":7,"nodeType":"54","endLine":313,"endColumn":10},{"ruleId":"52","severity":1,"message":"53","line":323,"column":8,"nodeType":"54","endLine":323,"endColumn":52},{"ruleId":"60","severity":1,"message":"61","line":5,"column":7,"nodeType":"62","messageId":"63","endLine":5,"endColumn":29},{"ruleId":"60","severity":1,"message":"64","line":9,"column":7,"nodeType":"62","messageId":"63","endLine":9,"endColumn":23},{"ruleId":"48","replacedBy":"65"},{"ruleId":"50","replacedBy":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-unused-vars","'uriTemplateInterceptor' is assigned a value but never used.","Identifier","unusedVar","'uriListConverter' is assigned a value but never used.",["67"],["68"],"no-global-assign","no-unsafe-negation"]